Changeset created on Thu Apr 05 14:33:18 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Fields2SolrDoc knows singular value fields

    Singular value fields will now be recognized by Fields2SolrDoc. Only
    the first value given for such a field will be used.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-solr/workingsets/4.0.1-Edurep/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/doc/license.conf /home/edurep/development/meresco-solr/workingsets/4.0.1-Edurep/version_1/doc/license.conf
--- version_0/doc/license.conf	1970-01-01 01:00:00.000000000 +0100
+++ version_1/doc/license.conf	2012-04-05 16:33:17.000000000 +0200
@@ -0,0 +1,11 @@
+{
+    "project": "Meresco Solr",
+    "description": "\"Meresco Solr\" is a set of components and tools\n to integrate Solr into \"Meresco.\"",
+    "license": "GPLv2",
+    "copyrights": [
+        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2012]},
+        {"name": "Stichting Kennisnet", "url": "http://www.kennisnet.nl", "years": [2012]}
+    ],
+    "copyrights_unused": [
+    ]
+}
Only in version_0: license.conf
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/solr/fields2solrdoc.py /home/edurep/development/meresco-solr/workingsets/4.0.1-Edurep/version_1/meresco/solr/fields2solrdoc.py
--- version_0/meresco/solr/fields2solrdoc.py	2012-04-05 14:34:39.000000000 +0200
+++ version_1/meresco/solr/fields2solrdoc.py	2012-04-05 16:33:17.000000000 +0200
@@ -3,7 +3,8 @@
 # "Meresco Solr" is a set of components and tools
 #  to integrate Solr into "Meresco." 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Solr"
 # 
@@ -25,12 +26,14 @@
 
 from meresco.core import Observable
 from xml.sax.saxutils import escape as escapeXml
+from itertools import chain
 
 class Fields2SolrDoc(Observable):
-    def __init__(self, transactionName, partname):
+    def __init__(self, transactionName, partname, singularValueFields=None):
         Observable.__init__(self)
         self._transactionName = transactionName
         self._partname = partname
+        self._singularValueFields = set(singularValueFields) if singularValueFields else set()
         self.txs = {}
 
     def begin(self, name):
@@ -38,11 +41,14 @@
             return
         tx = self.ctx.tx
         tx.join(self)
-        self.txs[tx.getId()] = []
+        self.txs[tx.getId()] = {}
 
     def addField(self, name, value):
         tx = self.ctx.tx
-        self.txs[tx.getId()].append((name, value))
+        valueList = self.txs[tx.getId()].setdefault(name, [])
+        if len(valueList) == 1 and name in self._singularValueFields:
+            return
+        valueList.append(value)
 
     def commit(self, id):
         fields = self.txs.pop(id)
@@ -56,10 +62,8 @@
         ] 
         def fieldStatement(key, value):
             return '<field name="%s">%s</field>' % (escapeXml(key), escapeXml(value))
+        allFields = ((k,v) for k,vs in fields.items() for v in vs)
 
-        xml = "<doc>%s</doc>" % ''.join(fieldStatement(*args) for args in specialFields+fields)
+        xml = "<doc>%s</doc>" % ''.join(fieldStatement(*args) for args in chain(iter(specialFields), allFields))
         yield self.all.add(identifier=recordIdentifier, partname=self._partname, data=xml)
 
-    def _terms(self, fields):
-        return set([value for (name, value) in fields])
-
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/fields2solrdoctest.py /home/edurep/development/meresco-solr/workingsets/4.0.1-Edurep/version_1/test/fields2solrdoctest.py
--- version_0/test/fields2solrdoctest.py	2012-04-05 14:34:39.000000000 +0200
+++ version_1/test/fields2solrdoctest.py	2012-04-05 16:33:17.000000000 +0200
@@ -4,6 +4,7 @@
 #  to integrate Solr into "Meresco." 
 # 
 # Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Solr"
 # 
@@ -25,14 +26,22 @@
 
 from seecr.test import SeecrTestCase, CallTrace
 
-from meresco.core import Observable, TransactionScope
+from meresco.core import Observable, TransactionScope, Transaction
 from meresco.solr.fields2solrdoc import Fields2SolrDoc
 from weightless.core import be, compose
+from StringIO import StringIO
+from lxml.etree import parse
 
 def add(identifier, partname, data):
     return
     yield
 
+def todict(data):
+    result = {}
+    for field in parse(StringIO(data)).xpath('/doc/field'):
+        result.setdefault(field.attrib['name'], []).append(field.text)
+    return result
+
 class Fields2SolrDocTest(SeecrTestCase):
 
     def setUp(self):
@@ -56,13 +65,7 @@
         list(compose(self.fxf.commit(self.fxf.ctx.tx.getId())))
         self.assertEquals(["add"], [m.name for m in self.observer.calledMethods])
         kwargs = self.observer.calledMethods[0].kwargs
-        self.assertEqualsWS('<doc><field name="__id__">iden&amp;tifier</field><field name="field_one">valueOne</field><field name="field_one">anotherValueOne</field><field name="field_two">value&lt;Two&gt;</field></doc>', kwargs['data'])
-
-    def testCollectAllTerms(self):
-        fields = [("key_1", "value_1"), ("key_1", "value_2"), ("key_2", "value_3"), ("key_3", "value_1"), ("key_3", "value_2"), ("key_3", "value_4")]
-
-        self.assertEquals(set([]), self.fxf._terms([]))
-        self.assertEquals(set(['value_1', 'value_2', 'value_3', 'value_4']), self.fxf._terms(fields))
+        self.assertEquals({'__id__':['iden&tifier'], 'field_one':['valueOne', 'anotherValueOne'], 'field_two': ['value<Two>']}, todict(kwargs['data']))
 
     def testWorksWithRealTransactionScope(self):
         intercept = CallTrace('Intercept', ignoredAttributes=['begin', 'commit', 'rollback'], methods={'add': add})
@@ -93,5 +96,22 @@
         self.assertEquals(['add'], [m.name for m in intercept.calledMethods])
         method = intercept.calledMethods[0]
         expectedXml = """<doc><field name="__id__">an:identifier</field><field name="field.name">MyName</field><field name="field.name">AnotherName</field><field name="field.title">MyDocument</field></doc>"""
-        self.assertEquals(((), {'identifier': 'an:identifier', 'partname': 'fields-partname', 'data': expectedXml}), (method.args, method.kwargs))
- 
+        self.assertEquals((), method.args)
+        self.assertEquals('an:identifier', method.kwargs['identifier'])
+        self.assertEquals('fields-partname', method.kwargs['partname'])
+        self.assertEquals({'__id__': ['an:identifier'], 'field.name':['MyName', 'AnotherName'], 'field.title': ['MyDocument']}, todict(method.kwargs['data']))
+
+    def testSingularValueFields(self):
+        __callstack_var_tx__ = Transaction('name') 
+        __callstack_var_tx__.locals['id'] = 'identifier'
+        observer = CallTrace('observer', emptyGeneratorMethods=['add'])
+        fxf = Fields2SolrDoc('name', 'partname', singularValueFields=['once'])
+        fxf.addObserver(observer)
+        fxf.begin(name='name')
+        fxf.addField('once', 'one')
+        fxf.addField('once', 'two')
+        fxf.addField('twice', 'one')
+        fxf.addField('twice', 'two')
+        list(compose(fxf.commit(__callstack_var_tx__.getId())))
+        method = observer.calledMethods[0]
+        self.assertEquals({'__id__': ['identifier'], 'once':['one'], 'twice': ['one', 'two']}, todict(method.kwargs['data']))
