Changeset created on Thu Feb 02 11:01:08 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Meresco 4 compatability

    Meresco 4 compatability

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-solr/workingsets/4.0-beta2-Seecr/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/deps.txt /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/deps.txt
--- version_0/deps.txt	2012-01-17 13:47:11.000000000 +0100
+++ version_1/deps.txt	2012-02-02 12:00:57.000000000 +0100
@@ -1,7 +1,10 @@
-python-meresco-components-4.0-beta1-seecr (>= 4)
+python-meresco-components (>= 4.0)
+python-meresco-components (<< 4.1)
+python-meresco-core (>= 4.0)
+python-meresco-core (<< 4.1)
 solr (>= 3.2.0)
 solr (<< 3.3)
 python-cqlparser (>= 1.6.1)
 python-cqlparser (< 1.7)
-python-weightless-core (>= 0.6.2)
-python-weightless-core (<< 0.7)
+python-weightless-core (>= 0.7)
+python-weightless-core (<< 0.8)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/license.conf /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/license.conf
--- version_0/license.conf	2012-01-17 13:47:11.000000000 +0100
+++ version_1/license.conf	2012-02-02 12:00:57.000000000 +0100
@@ -3,7 +3,7 @@
     "description": "\"Meresco Solr\" is a set of components and tools\n to integrate Solr into \"Meresco.\"",
     "license": "GPLv2",
     "copyrights": [
-        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2011]}
+        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2012]}
     ],
     "copyrights_unused": [
     ]
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/solr/cql2solrlucenequery.py /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/meresco/solr/cql2solrlucenequery.py
--- version_0/meresco/solr/cql2solrlucenequery.py	2012-01-17 13:47:11.000000000 +0100
+++ version_1/meresco/solr/cql2solrlucenequery.py	2012-02-02 12:00:57.000000000 +0100
@@ -36,7 +36,8 @@
         self._cqlComposer = SolrLuceneQueryComposer(unqualifiedFields)
 
     def executeQuery(self, cqlAbstractSyntaxTree, *args, **kwargs):
-        return self.asyncany.executeQuery(luceneQueryString=self._convert(cqlAbstractSyntaxTree), *args, **kwargs)
+        response = yield self.any.executeQuery(luceneQueryString=self._convert(cqlAbstractSyntaxTree), *args, **kwargs)
+        raise StopIteration(response)
 
     def _convert(self, ast):
         ClauseCollector(ast, self.log).visit()
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/solr/fields2solrdoc.py /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/meresco/solr/fields2solrdoc.py
--- version_0/meresco/solr/fields2solrdoc.py	2012-01-17 13:47:11.000000000 +0100
+++ version_1/meresco/solr/fields2solrdoc.py	2012-02-02 12:00:57.000000000 +0100
@@ -33,10 +33,10 @@
         self._partname = partname
         self.txs = {}
 
-    def begin(self):
-        tx = self.ctx.tx
-        if tx.name != self._transactionName:
+    def begin(self, name):
+        if name != self._transactionName:
             return
+        tx = self.ctx.tx
         tx.join(self)
         self.txs[tx.getId()] = []
 
@@ -44,12 +44,12 @@
         tx = self.ctx.tx
         self.txs[tx.getId()].append((name, value))
 
-    def commit(self):
-        tx = self.ctx.tx
-        fields = self.txs.pop(tx.getId())
+    def commit(self, id):
+        fields = self.txs.pop(id)
         if not fields:
             return
 
+        tx = self.ctx.tx
         recordIdentifier = tx.locals["id"]
         specialFields = [
             ('__id__', recordIdentifier), 
@@ -58,7 +58,7 @@
             return '<field name="%s">%s</field>' % (escapeXml(key), escapeXml(value))
 
         xml = "<doc>%s</doc>" % ''.join(fieldStatement(*args) for args in specialFields+fields)
-        return self.asyncdo.add(identifier=recordIdentifier, partname=self._partname, data=xml)
+        yield self.all.add(identifier=recordIdentifier, partname=self._partname, data=xml)
 
     def _terms(self, fields):
         return set([value for (name, value) in fields])
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/solr/solrinterface.py /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/meresco/solr/solrinterface.py
--- version_0/meresco/solr/solrinterface.py	2012-01-17 13:47:11.000000000 +0100
+++ version_1/meresco/solr/solrinterface.py	2012-02-02 12:00:57.000000000 +0100
@@ -3,7 +3,7 @@
 # "Meresco Solr" is a set of components and tools
 #  to integrate Solr into "Meresco." 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Solr"
 # 
@@ -32,6 +32,7 @@
 from weightless.http import httpget, httppost
 from meresco.components.facetindex import Response
 
+
 CRLF = '\r\n'
 
 class SolrInterface(object):
@@ -42,26 +43,28 @@
         if core is not None:
             self.observable_name = lambda: core
 
-    def unknown(self, message, *args, **kwargs):
-        print 'Unexpected unknown for:', message, args, kwargs
+    def all_unknown(self, message, *args, **kwargs):
+        print 'Unexpected all.unknown for:', message, args, kwargs
+        return
+        yield
 
-    def docsetFromQuery(self, *args, **kwargs):
-        return None
+    def do_unknown(self, message, *args, **kwargs):
+        print 'Unexpected do.unknown for:', message, args, kwargs
 
     def _path(self, action):
         return '/solr/%s' % action if self._core is None else '/solr/%s/%s' % (self._core, action)
 
     def add(self, identifier, partname, data):
         path = self._path('update')
-        yield self._send(path=path, text="<add>%s</add>" % data)
-        yield self._send(path=path, text="<commit/>")
+        yield self._send(path=path, body="<add>%s</add>" % data)
+        yield self._send(path=path, body="<commit/>")
 
     def delete(self, identifier):
         path = self._path('update')
-        yield self._send(path=path, text="<delete><id>%s</id></delete>" % escapeXml(identifier))
-        yield self._send(path=path, text='<commit expungeDeletes="true"/>')
+        yield self._send(path=path, body="<delete><id>%s</id></delete>" % escapeXml(identifier))
+        yield self._send(path=path, body='<commit expungeDeletes="true"/>')
 
-    def executeQuery(self, luceneQueryString, start=0, stop=10, sortBy=None, sortDescending=None, fieldnamesAndMaximums=None, solrParameters=None, **kwargs):
+    def executeQuery(self, luceneQueryString, start=0, stop=10, sortBy=None, sortDescending=None, fieldnamesAndMaximums=None, **kwargs):
         if not luceneQueryString:
             raise ValueError("Empty luceneQueryString not allowed.")
         arguments = dict(
@@ -72,8 +75,6 @@
         if sortBy is not None:
             arguments["sort"] = "%s %s" % (sortBy, 'desc' if sortDescending else 'asc')
         arguments.update(_drilldownArguments(fieldnamesAndMaximums))
-        if solrParameters is not None:
-            arguments.update(solrParameters)
 
         path = self._path('select')
         body = yield self._read('%s?%s' % (path, urlencode(arguments, doseq=True)))
@@ -85,18 +86,25 @@
             _updateResponseWithDrilldownData(arguments, xml, response)
         raise StopIteration(response)
 
-    def _send(self, path, text):
-        response = yield httppost(self._host, self._port, path, text, headers={'Content-Type': 'text/xml', 'Content-Length': len(text)})
-        header, body = response.split(CRLF * 2, 1)
-        assert header.startswith('HTTP/1.1 200 OK'), response
-        raise StopIteration(response)
+    def _send(self, path, body):
+        headers = None
+        if body:
+            headers={'Content-Type': 'text/xml', 'Content-Length': len(body)}
+        response = yield httppost(host=self._host, port=self._port, request=path, body=body, headers=headers)
+        header, body = response.split("\r\n\r\n", 1)
+        self._verify200(header, response)
 
     def _read(self, path):
         response = yield httpget(self._host, self._port, path)
         header, body = response.split('\r\n\r\n', 1)
-        assert header.startswith('HTTP/1.1 200 OK'), response
+        self._verify200(header, response)
         raise StopIteration(body)
 
+    def _verify200(self, header, response):
+        if not header.startswith('HTTP/1.1 200'):
+            raise IOError("Expected status '200' from Solr, but got: " + response)
+
+
 def _drilldownArguments(fieldnamesAndMaximums):
     arguments = {}
     if fieldnamesAndMaximums is not None:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/cql2solrlucenequerytest.py /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/test/cql2solrlucenequerytest.py
--- version_0/test/cql2solrlucenequerytest.py	2012-01-17 13:47:11.000000000 +0100
+++ version_1/test/cql2solrlucenequerytest.py	2012-02-02 12:00:57.000000000 +0100
@@ -3,7 +3,7 @@
 # "Meresco Solr" is a set of components and tools
 #  to integrate Solr into "Meresco." 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Solr"
 # 
@@ -27,12 +27,17 @@
 from cq2utils import CallTrace
 from cqlparser import parseString
 from meresco.solr.cql2solrlucenequery import CQL2SolrLuceneQuery
-from meresco.core import be, Observable
+from meresco.core import Observable
+from weightless.core import be, compose
+
+def executeQueryMock(luceneQueryString, *args, **kwargs):
+    return
+    yield
 
 class CQL2SolrLuceneQueryTest(TestCase):
     def setUp(self):
         self.convertor = CQL2SolrLuceneQuery([('field', 1.0)])
-        self.observer = CallTrace('Query responder')
+        self.observer = CallTrace('Query responder', methods={'executeQuery': executeQueryMock})
         self.dna = be((Observable(),
             (self.convertor, 
                 (self.observer,),
@@ -43,33 +48,33 @@
             self.loggedClauses.append(clause)
         self.convertor.log = logShunt
 
-    def assertLog(self, expectedClauses, query):
+    def assertConversion(self, expectedClauses, query):
         self.loggedClauses = []
-        list(self.dna.any.executeQuery(cqlAbstractSyntaxTree=parseString(query)))
+        list(compose(self.dna.any.executeQuery(cqlAbstractSyntaxTree=parseString(query))))
         self.assertEquals(expectedClauses, self.loggedClauses)
 
     def testOneTerm(self):
-        self.assertLog(['term'], 'term')
+        self.assertConversion(['term'], 'term')
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertEquals("executeQuery", self.observer.calledMethods[0].name)
         self.assertEquals("field:term", self.observer.calledMethods[0].kwargs['luceneQueryString'])
 
     def testIndexRelationTerm(self):
-        self.assertLog(['field = term'], 'field=term')
+        self.assertConversion(['field = term'], 'field=term')
 
     def testIndexRelationBoostTerm(self):
-        self.assertLog(['field =/boost=1.1 term'], "field =/boost=1.1 term")
+        self.assertConversion(['field =/boost=1.1 term'], "field =/boost=1.1 term")
 
     def testIndexExactTerm(self):
-        self.assertLog(['field exact term'], 'field exact term')
-        self.assertLog(['field exact "term with spaces"'], 'field exact "term with spaces"')
+        self.assertConversion(['field exact term'], 'field exact term')
+        self.assertConversion(['field exact "term with spaces"'], 'field exact "term with spaces"')
 
     def testTermAndTerm(self):
-        self.assertLog(['term1', 'term2'], 'term1 AND term2')
-        self.assertLog(['term1', 'term2', 'term3'], 'term1 AND term2 OR term3')
-        self.assertLog(['term1', 'term2', 'term3'], 'term1 AND (term2 OR term3)')
-        self.assertLog(['term1', 'term2', 'term3'], 'term1 OR term2 AND term3')
+        self.assertConversion(['term1', 'term2'], 'term1 AND term2')
+        self.assertConversion(['term1', 'term2', 'term3'], 'term1 AND term2 OR term3')
+        self.assertConversion(['term1', 'term2', 'term3'], 'term1 AND (term2 OR term3)')
+        self.assertConversion(['term1', 'term2', 'term3'], 'term1 OR term2 AND term3')
 
     def testBraces(self):
-        self.assertLog(['term'], '(term)')
+        self.assertConversion(['term'], '(term)')
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/fields2solrdoctest.py /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/test/fields2solrdoctest.py
--- version_0/test/fields2solrdoctest.py	2012-01-17 13:47:11.000000000 +0100
+++ version_1/test/fields2solrdoctest.py	2012-02-02 12:00:57.000000000 +0100
@@ -3,7 +3,7 @@
 # "Meresco Solr" is a set of components and tools
 #  to integrate Solr into "Meresco." 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Solr"
 # 
@@ -25,7 +25,13 @@
 
 from cq2utils import CQ2TestCase, CallTrace
 
+from meresco.core import Observable, TransactionScope
 from meresco.solr.fields2solrdoc import Fields2SolrDoc
+from weightless.core import be, compose
+
+def add(identifier, partname, data):
+    return
+    yield
 
 class Fields2SolrDocTest(CQ2TestCase):
 
@@ -39,15 +45,15 @@
         self.fxf = Fields2SolrDoc("tsName", "fields-partname")
         self.fxf.ctx = ctx 
         self.fxf.ctx.tx = tx
-        self.observer = CallTrace()
+        self.observer = CallTrace(methods={'add': add})
         self.fxf.addObserver(self.observer)
 
     def testCreateXml(self):
-        self.fxf.begin()
+        self.fxf.begin(name="tsName")
         self.fxf.addField("field_one", "valueOne")
         self.fxf.addField("field_one", "anotherValueOne")
         self.fxf.addField("field_two", "value<Two>")
-        list(self.fxf.commit())
+        list(compose(self.fxf.commit(self.fxf.ctx.tx.getId())))
         self.assertEquals(["add"], [m.name for m in self.observer.calledMethods])
         kwargs = self.observer.calledMethods[0].kwargs
         self.assertEqualsWS('<doc><field name="__id__">iden&amp;tifier</field><field name="field_one">valueOne</field><field name="field_one">anotherValueOne</field><field name="field_two">value&lt;Two&gt;</field></doc>', kwargs['data'])
@@ -58,3 +64,34 @@
         self.assertEquals(set([]), self.fxf._terms([]))
         self.assertEquals(set(['value_1', 'value_2', 'value_3', 'value_4']), self.fxf._terms(fields))
 
+    def testWorksWithRealTransactionScope(self):
+        intercept = CallTrace('Intercept', ignoredAttributes=['begin', 'commit', 'rollback'], methods={'add': add})
+        class MockVenturi(Observable):
+            def all_unknown(self, message, *args, **kwargs):
+                self.ctx.tx.locals['id'] = 'an:identifier'
+                yield self.all.unknown(message, *args, **kwargs)
+        class MockMultiFielder(Observable):
+            def add(self, *args, **kwargs):
+                self.do.addField('field.name', 'MyName')
+                self.do.addField('field.name', 'AnotherName')
+                self.do.addField('field.title', 'MyDocument')
+                yield 'ok'
+        root = be( 
+            (Observable(),
+                (TransactionScope(transactionName="solrDoc"),
+                    (MockVenturi(),
+                        (MockMultiFielder(),
+                            (Fields2SolrDoc("solrDoc", "fields-partname"),
+                                (intercept,),
+                            )   
+                        )   
+                    )   
+                )   
+            )   
+        )   
+        list(compose(root.all.add('some', 'arguments')))
+        self.assertEquals(['add'], [m.name for m in intercept.calledMethods])
+        method = intercept.calledMethods[0]
+        expectedXml = """<doc><field name="__id__">an:identifier</field><field name="field.name">MyName</field><field name="field.name">AnotherName</field><field name="field.title">MyDocument</field></doc>"""
+        self.assertEquals(((), {'identifier': 'an:identifier', 'partname': 'fields-partname', 'data': expectedXml}), (method.args, method.kwargs))
+ 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/solrinterfacetest.py /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/test/solrinterfacetest.py
--- version_0/test/solrinterfacetest.py	2012-01-17 13:47:11.000000000 +0100
+++ version_1/test/solrinterfacetest.py	2012-02-02 12:00:57.000000000 +0100
@@ -24,13 +24,17 @@
 ## end license ##
 
 from unittest import TestCase
+
+from cgi import parse_qs
+
+from weightless.core import compose
+from weightless.io import Suspend
 from meresco.core import Observable
 from meresco.solr.solrinterface import SolrInterface
+from seecr.test import CallTrace
 
-from cgi import parse_qs
 
 class SolrInterfaceTest(TestCase):
-    
     def setUp(self):
         TestCase.setUp(self)
         self._solrInterface = SolrInterface("localhost", 8888)
@@ -38,7 +42,7 @@
     def testCoreSupport(self):
         sendData = []
         interface = SolrInterface("localhost", "8888", core="THE_CORE")
-        interface._send = lambda path, text: sendData.append((path, text))
+        interface._send = lambda path, body: sendData.append((path, body))
         list(interface.add("recordId", "ignored", "<record><data>recordData</data></record>"))
         self.assertEquals(2, len(sendData))
         self.assertEquals(('/solr/THE_CORE/update', '<add><record><data>recordData</data></record></add>'), sendData[0])
@@ -47,8 +51,16 @@
         self.assertQuery("/solr/THE_CORE/select?q=meresco.exists%3Atrue&start=5&rows=5&sort=field+desc", path)
 
     def testAdd(self):
+        g = compose(self._solrInterface.add("recordId", "ignored", "<record><data>recordData</data></record>"))
+        self._resultFromServerResponses(g, 2 * ["SOME RESPONSE"])
+
+        g = compose(self._solrInterface.add("recordId", "ignored", "<record><data>recordData</data></record>"))
+        self.assertRaises(
+            IOError,
+            lambda: self._resultFromServerResponses(g, ["ERROR"], '500'))
+
         sendData = []
-        self._solrInterface._send = lambda path, text: sendData.append((path, text))
+        self._solrInterface._send = lambda path, body: sendData.append((path, body))
         list(self._solrInterface.add("recordId", "ignored", "<record><data>recordData</data></record>"))
         self.assertEquals(2, len(sendData))
         self.assertEquals(('/solr/update', '<add><record><data>recordData</data></record></add>'), sendData[0])
@@ -59,12 +71,12 @@
         observable = Observable()
         solrInterface1 = SolrInterface("localhost", 1234, core="index1")
         solrInterface2 = SolrInterface("localhost", 1234, core="index2")
-        solrInterface1._send = lambda path, text: sendData.append(("1", path, text))
-        solrInterface2._send = lambda path, text: sendData.append(("2", path, text))
+        solrInterface1._send = lambda path, body: sendData.append(("1", path, body))
+        solrInterface2._send = lambda path, body: sendData.append(("2", path, body))
         observable.addObserver(solrInterface1)
         observable.addObserver(solrInterface2)
 
-        list(observable.all['index1'].add(identifier="recordId", partname="partname", data="data"))
+        list(compose(observable.all['index1'].add(identifier="recordId", partname="partname", data="data")))
 
         self.assertEquals([
                 ('1', '/solr/index1/update', '<add>data</add>'),
@@ -72,8 +84,16 @@
             ], sendData)
 
     def testDelete(self):
+        g = compose(self._solrInterface.delete("record&:1"))
+        self._resultFromServerResponses(g, 2 * ["SOME RESPONSE"])
+
+        g = compose(self._solrInterface.delete("record&:1"))
+        self.assertRaises(
+            IOError,
+            lambda: self._resultFromServerResponses(g, "ERROR", '500'))
+
         sendData = []
-        self._solrInterface._send = lambda path, text: sendData.append((path, text))
+        self._solrInterface._send = lambda path, body: sendData.append((path, body))
         list(self._solrInterface.delete("record&:1"))
         self.assertEquals(2, len(sendData))
         self.assertEquals(('/solr/update', '<delete><id>%s</id></delete>' % "record&amp;:1"), sendData[0])
@@ -126,6 +146,19 @@
                 return response.total, response.hits, response.drilldownData, readData[0]
             return response.total, response.hits, readData[0]
 
+    def _resultFromServerResponses(self, g, serverResponses, responseStatus='200'):
+        for response in serverResponses:
+            s = g.next()
+            self.assertEquals(Suspend, type(s))
+            s(CallTrace('reactor'), lambda: None)
+            s.resume('HTTP/1.1 %s\r\n\r\n%s' % (responseStatus, response))
+        try:
+            g.next()
+            self.fail("expected StopIteration")
+        except StopIteration, e:
+            if len(e.args) > 0:
+                return e.args[0]
+    
     def assertQuery(self, query1, query2):
         path1, arguments1 = query1.split("?", 1)
         arguments1 = parse_qs(arguments1, keep_blank_values=True)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/testsetup.sh /home/weightless/development/meresco-solr/workingsets/4.0-beta2-Seecr/version_1/testsetup.sh
--- version_0/testsetup.sh	2012-01-17 13:47:11.000000000 +0100
+++ version_1/testsetup.sh	2012-02-02 12:00:57.000000000 +0100
@@ -24,21 +24,31 @@
 # 
 ## end license ##
 
-set -e
+set -o errexit
 
 rm -rf tmp build
 
 python setup.py install --root tmp
 fullPythonVersion=$(pyversions --default)
 
-mkdir tmp/usr/lib/${fullPythonVersion}/site-packages/meresco --parents
-cp meresco/__init__.py tmp/usr/lib/${fullPythonVersion}/site-packages/meresco
-export PYTHONPATH=`pwd`/tmp/usr/lib/${fullPythonVersion}/site-packages
+#mkdir tmp/usr/local/lib/${fullPythonVersion}/dist-packages/meresco --parents
+
+VERSION="x.y.z"
+
+find tmp -name '*.py' -exec sed -r -e \
+    "/DO_NOT_DISTRIBUTE/ d;
+    s/\\\$Version:[^\\\$]*\\\$/\\\$Version: ${VERSION}\\\$/" -i '{}' \;
+
+cp meresco/__init__.py tmp/usr/local/lib/${fullPythonVersion}/dist-packages/meresco
+export PYTHONPATH=`pwd`/tmp/usr/local/lib/${fullPythonVersion}/dist-packages:${PYTHONPATH}
 cp -r test tmp/test
 
+set +o errexit
 (
 cd tmp/test
 ./alltests.sh
 )
+set -o errexit
 
 rm -rf tmp build
+
