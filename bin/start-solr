#!/usr/bin/env python
## begin license ##
#
# "Meresco Solr" is a set of components and tools
#  to integrate Solr into "Meresco."
#
# Copyright (C) 2012-2013 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
# Copyright (C) 2013 Stichting Kennisnet http://www.kennisnet.nl
#
# This file is part of "Meresco Solr"
#
# "Meresco Solr" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Solr" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Solr"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from os.path import abspath, dirname                #DO_NOT_DISTRIBUTE
from os import system, getcwd                       #DO_NOT_DISTRIBUTE
from glob import glob                               #DO_NOT_DISTRIBUTE
from sys import path as systemPath, exit            #DO_NOT_DISTRIBUTE
from subprocess import Popen                        #DO_NOT_DISTRIBUTE
parentdir = dirname(dirname(abspath(__file__)))     #DO_NOT_DISTRIBUTE
system('find .. -name "*.pyc" | xargs rm -f')       #DO_NOT_DISTRIBUTE
for path in glob(parentdir+'/deps.d/*'):            #DO_NOT_DISTRIBUTE
    systemPath.insert(0, path)                      #DO_NOT_DISTRIBUTE
systemPath.insert(0, parentdir)                     #DO_NOT_DISTRIBUTE

from sys import argv, exit
from os import listdir
from os.path import join
from optparse import OptionParser, Option
from subprocess import Popen

from meresco.solr.server import Server, usrShareDir


def parseArguments(args):
    features = [f.rsplit('.', 1)[0] for f in listdir(join(usrShareDir, 'solrconfig.d'))]
    parser = OptionParser(description="""Available features: %s.""" % ', '.join(features), epilog="""
Example config:
{
    "core1": {},
    "core2": {"feature": {"option": "value"}},
    "core3": {"booleanFeature": true},
    "core4": {"additionalSchemaXml": "path to additional schema.xml"},
    "core5": {"additionalSolrConfig": "path to additional solrconfig.xml"}
}
""")
    parser.format_epilog = lambda formatter: parser.epilog
    parser.add_option(Option('', '--port', type='int', help='Solr port number', dest='port'))
    parser.add_option(Option('', '--stateDir', type='string', help='Solr state directory', dest='stateDir'))
    parser.add_option(Option('', '--config', type='string', help="Filename with json configuration file for solr", dest="config"))
    parser.add_option(Option('', '--javaMX', type='string', help="Value for -Xmx setting for java", dest="javaMX", default="1024M"))
    options, arguments = parser.parse_args(args)
    if not all([options.port, options.stateDir, options.config]):
        parser.print_help()
        raise ValueError("Missing required option (all except javaMX are required)")
    return options, arguments


if __name__ == '__main__':
    args = argv[1:]
    try:
        options, arguments = parseArguments(args)
    except ValueError, e:
        print e
        exit(1)

    if Popen(["java -version 2>&1 | grep 'libgcj' > /dev/null 2>&1"], shell=True).wait() == 0:
        print "Don't use GCJ as the default java JRE."
        exit(1)

    solrServer = Server(stateDir=options.stateDir, port=options.port, configFile=options.config)
    solrServer.start(javaMX=options.javaMX)


